"""
–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è #9: –ñ–∞–¥—ñ–±–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
–°–∏—Å—Ç–µ–º–∞ –∑–¥–∞—á—ñ –≥—Ä–æ—à–µ–π –¥–ª—è –∫–∞—Å–æ–≤–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É

–ó–∞–≤–¥–∞–Ω–Ω—è: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É –≥—Ä–æ—à–µ–π:
1. –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - –≤–∏–±–∏—Ä–∞—î –Ω–∞–π–±—ñ–ª—å—à—ñ –Ω–æ–º—ñ–Ω–∞–ª–∏ —Å–ø–æ—á–∞—Ç–∫—É
2. –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç
"""

import time
from typing import Dict, List, Tuple
import sys

# –î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º—ñ–Ω–∞–ª–∏ –º–æ–Ω–µ—Ç (–≤—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –¥–æ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ)
COINS = [50, 25, 10, 5, 2, 1]

def find_coins_greedy(amount: int) -> Dict[int, int]:
    """
    –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É –≥—Ä–æ—à–µ–π.
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏:
    1. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à—ñ –Ω–æ–º—ñ–Ω–∞–ª–∏
    2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–º—ñ–Ω–∞–ª—É –±–µ—Ä–µ–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç
    3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –º–µ–Ω—à–æ–≥–æ –Ω–æ–º—ñ–Ω–∞–ª—É –∑ –∑–∞–ª–∏—à–∫–æ–º
    
    Args:
        amount (int): –°—É–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É
        
    Returns:
        Dict[int, int]: –°–ª–æ–≤–Ω–∏–∫ {–Ω–æ–º—ñ–Ω–∞–ª: –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–º–æ–Ω–µ—Ç}
    """
    if amount <= 0:
        return {}
    
    result = {}
    remaining = amount
    
    for coin in COINS:
        if remaining >= coin:
            count = remaining // coin  # –¶—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è
            result[coin] = count
            remaining -= coin * count
            
            # –Ø–∫—â–æ –∑–∞–ª–∏—à–æ–∫ —Å—Ç–∞–≤ 0, –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
            if remaining == 0:
                break
    
    return result

def find_min_coins(amount: int) -> Dict[int, int]:
    """
    –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–æ–Ω–µ—Ç.
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏:
    1. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é dp, –¥–µ dp[i] = –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è —Å—É–º–∏ i
    2. –î–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –º–æ–Ω–µ—Ç–∏
    3. –í–∏–±–∏—Ä–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–æ–Ω–µ—Ç
    4. –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥—É
    
    Args:
        amount (int): –°—É–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É
        
    Returns:
        Dict[int, int]: –°–ª–æ–≤–Ω–∏–∫ {–Ω–æ–º—ñ–Ω–∞–ª: –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–º–æ–Ω–µ—Ç}
    """
    if amount <= 0:
        return {}
    
    # dp[i] = –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è —Å—É–º–∏ i
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0  # –î–ª—è —Å—É–º–∏ 0 –ø–æ—Ç—Ä—ñ–±–Ω–æ 0 –º–æ–Ω–µ—Ç
    
    # parent[i] = –Ω–æ–º—ñ–Ω–∞–ª –º–æ–Ω–µ—Ç–∏, —è–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–º–∏ i
    parent = [-1] * (amount + 1)
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é dp
    for i in range(1, amount + 1):
        for coin in COINS:
            if coin <= i and dp[i - coin] + 1 < dp[i]:
                dp[i] = dp[i - coin] + 1
                parent[i] = coin
    
    # –Ø–∫—â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–ª–∞—Å—Ç–∏ —Å—É–º—É (—Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑ –Ω–∞—à–∏–º–∏ –Ω–æ–º—ñ–Ω–∞–ª–∞–º–∏)
    if dp[amount] == float('inf'):
        return {}
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è
    result = {}
    current = amount
    
    while current > 0:
        coin = parent[current]
        result[coin] = result.get(coin, 0) + 1
        current -= coin
    
    return result

def compare_algorithms(amount: int) -> Tuple[Dict[int, int], Dict[int, int], Dict[str, float]]:
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∂–∞–¥—ñ–±–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
    
    Args:
        amount (int): –°—É–º–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        
    Returns:
        Tuple: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∂–∞–¥—ñ–±–Ω–æ–≥–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç_–¥–ø, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_—á–∞—Å—É)
    """
    # –¢–µ—Å—Ç—É—î–º–æ –∂–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
    start_time = time.perf_counter()
    greedy_result = find_coins_greedy(amount)
    greedy_time = time.perf_counter() - start_time
    
    # –¢–µ—Å—Ç—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    start_time = time.perf_counter()
    dp_result = find_min_coins(amount)
    dp_time = time.perf_counter() - start_time
    
    timing_stats = {
        'greedy_time': greedy_time,
        'dp_time': dp_time,
        'speedup': dp_time / greedy_time if greedy_time > 0 else float('inf')
    }
    
    return greedy_result, dp_result, timing_stats

def get_total_coins(coin_dict: Dict[int, int]) -> int:
    """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç"""
    return sum(coin_dict.values())

def verify_solution(coin_dict: Dict[int, int], target_amount: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ä—ñ—à–µ–Ω–Ω—è"""
    total = sum(coin * count for coin, count in coin_dict.items())
    return total == target_amount

def format_coins(coin_dict: Dict[int, int]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ª–æ–≤–Ω–∏–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–≤–æ–¥—É"""
    if not coin_dict:
        return "–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–ª–∞—Å—Ç–∏ —Å—É–º—É"
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º—ñ–Ω–∞–ª–æ–º (–≤—ñ–¥ –±—ñ–ª—å—à–æ–≥–æ –¥–æ –º–µ–Ω—à–æ–≥–æ)
    sorted_coins = sorted(coin_dict.items(), key=lambda x: x[0], reverse=True)
    return "{" + ", ".join(f"{coin}: {count}" for coin, count in sorted_coins) + "}"

def demonstrate_algorithms():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥–∞—Ö"""
    print("üí∞ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í –†–û–ó–ú–Ü–ù–£ –ì–†–û–®–ï–ô")
    print("=" * 60)
    print(f"–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–æ–º—ñ–Ω–∞–ª–∏: {COINS}")
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Å—É–º–∏
    test_amounts = [113, 50, 37, 99, 1, 2, 127, 200]
    
    for amount in test_amounts:
        print(f"\nüíµ –°—É–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É: {amount}")
        print("-" * 40)
        
        # –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        greedy_result = find_coins_greedy(amount)
        greedy_total = get_total_coins(greedy_result)
        greedy_valid = verify_solution(greedy_result, amount)
        
        print(f"üèÉ –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º:")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {format_coins(greedy_result)}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç: {greedy_total}")
        print(f"   –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: {'‚úÖ' if greedy_valid else '‚ùå'}")
        
        # –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
        dp_result = find_min_coins(amount)
        dp_total = get_total_coins(dp_result)
        dp_valid = verify_solution(dp_result, amount)
        
        print(f"üß† –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {format_coins(dp_result)}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç: {dp_total}")
        print(f"   –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: {'‚úÖ' if dp_valid else '‚ùå'}")
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        if greedy_total == dp_total:
            print(f"‚öñÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–¥–Ω–∞–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç")
        elif dp_total < greedy_total:
            print(f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: –î–ü (–µ–∫–æ–Ω–æ–º—ñ—è {greedy_total - dp_total} –º–æ–Ω–µ—Ç)")
        else:
            print(f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: –ñ–∞–¥—ñ–±–Ω–∏–π (–µ–∫–æ–Ω–æ–º—ñ—è {dp_total - greedy_total} –º–æ–Ω–µ—Ç)")

def performance_analysis():
    """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    print(f"\n‚ö° –ê–ù–ê–õ–Ü–ó –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
    test_sizes = [100, 500, 1000, 2000, 5000, 10000]
    
    print(f"{'–°—É–º–∞':<8} {'–ñ–∞–¥—ñ–±–Ω–∏–π (–º—Å)':<15} {'–î–ü (–º—Å)':<12} {'–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è':<12} {'–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å'}")
    print("-" * 65)
    
    for amount in test_sizes:
        greedy_result, dp_result, timing = compare_algorithms(amount)
        
        greedy_ms = timing['greedy_time'] * 1000
        dp_ms = timing['dp_time'] * 1000
        speedup = timing['speedup']
        
        winner = "–ñ–∞–¥—ñ–±–Ω–∏–π" if greedy_ms < dp_ms else "–î–ü"
        
        print(f"{amount:<8} {greedy_ms:<15.3f} {dp_ms:<12.3f} {speedup:<12.1f}x {winner}")

def complexity_analysis():
    """–ê–Ω–∞–ª—ñ–∑ —á–∞—Å–æ–≤–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    print(f"\nüìä –ê–ù–ê–õ–Ü–ó –ß–ê–°–û–í–û–á –°–ö–õ–ê–î–ù–û–°–¢–Ü")
    print("=" * 50)
    
    print("üèÉ –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º:")
    print("   ‚Ä¢ –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(k), –¥–µ k - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤")
    print("   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(k)")
    print("   ‚Ä¢ –ü–µ—Ä–µ–≤–∞–≥–∏: –î—É–∂–µ —à–≤–∏–¥–∫–∏–π, –ø—Ä–æ—Å—Ç–∏–π —É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
    print("   ‚Ä¢ –ù–µ–¥–æ–ª—ñ–∫–∏: –ù–µ –∑–∞–≤–∂–¥–∏ –¥–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è")
    print("   ‚Ä¢ –î–ª—è –Ω–∞—à–æ–≥–æ –Ω–∞–±–æ—Ä—É –º–æ–Ω–µ—Ç [50, 25, 10, 5, 2, 1] –∑–∞–≤–∂–¥–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π")
    
    print(f"\nüß† –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:")
    print("   ‚Ä¢ –ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n √ó k), –¥–µ n - —Å—É–º–∞, k - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤")
    print("   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n)")
    print("   ‚Ä¢ –ü–µ—Ä–µ–≤–∞–≥–∏: –ó–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è")
    print("   ‚Ä¢ –ù–µ–¥–æ–ª—ñ–∫–∏: –ü–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å—É–º, –ø–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à–µ –ø–∞–º'—è—Ç—ñ")
    
    print(f"\nüéØ –í–∏—Å–Ω–æ–≤–∫–∏:")
    print("   ‚Ä¢ –î–ª—è –º–∞–ª–∏—Ö —Å—É–º (< 1000): —Ä—ñ–∑–Ω–∏—Ü—è –≤ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–µ–∑–Ω–∞—á–Ω–∞")
    print("   ‚Ä¢ –î–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å—É–º (> 5000): –∂–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑–Ω–∞—á–Ω–æ —à–≤–∏–¥—à–∏–π")
    print("   ‚Ä¢ –î–ª—è –Ω–∞—à–æ–≥–æ –Ω–∞–±–æ—Ä—É –º–æ–Ω–µ—Ç –æ–±–∏–¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
    print("   ‚Ä¢ –£ —Ä–µ–∞–ª—å–Ω–∏—Ö –∫–∞—Å–∞—Ö –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∂–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")

def edge_cases_testing():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤"""
    print(f"\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ì–†–ê–ù–ò–ß–ù–ò–• –í–ò–ü–ê–î–ö–Ü–í")
    print("=" * 50)
    
    edge_cases = [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 47, 48, 49, 51]
    
    for amount in edge_cases:
        greedy_result = find_coins_greedy(amount)
        dp_result = find_min_coins(amount)
        
        greedy_total = get_total_coins(greedy_result)
        dp_total = get_total_coins(dp_result)
        
        status = "‚úÖ" if greedy_total == dp_total else "‚ö†Ô∏è"
        
        print(f"{status} –°—É–º–∞ {amount:2d}: –ñ–∞–¥—ñ–±–Ω–∏–π={greedy_total:2d}, –î–ü={dp_total:2d} | "
              f"–ñ–∞–¥—ñ–±–Ω–∏–π: {format_coins(greedy_result)}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üí∞ –î–û–ú–ê–®–ù–Ñ –ó–ê–í–î–ê–ù–ù–Ø #9: –ñ–ê–î–Ü–ë–ù–Ü –ê–õ–ì–û–†–ò–¢–ú–ò –¢–ê –î–ò–ù–ê–ú–Ü–ß–ù–ï –ü–†–û–ì–†–ê–ú–£–í–ê–ù–ù–Ø")
    print("–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑–º—ñ–Ω—É –≥—Ä–æ—à–µ–π –¥–ª—è –∫–∞—Å–æ–≤–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É")
    print("=" * 80)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
    demonstrate_algorithms()
    
    # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    performance_analysis()
    
    # –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    complexity_analysis()
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    edge_cases_testing()
    
    print(f"\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –û—Å–Ω–æ–≤–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ README.md")

if __name__ == "__main__":
    main()
