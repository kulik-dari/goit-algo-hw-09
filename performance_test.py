"""
–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Ä–æ–∑–º—ñ–Ω—É –≥—Ä–æ—à–µ–π
"""

import time
import random
import matplotlib.pyplot as plt
import numpy as np
from main import find_coins_greedy, find_min_coins, get_total_coins
from typing import List, Tuple

def measure_performance(amounts: List[int], iterations: int = 5) -> Tuple[List[float], List[float]]:
    """
    –í–∏–º—ñ—Ä—é—î —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—É–º.
    
    Args:
        amounts: –°–ø–∏—Å–æ–∫ —Å—É–º –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        iterations: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
        
    Returns:
        Tuple[List[float], List[float]]: (—á–∞—Å–∏_–∂–∞–¥—ñ–±–Ω–æ–≥–æ, —á–∞—Å–∏_–¥–ø)
    """
    greedy_times = []
    dp_times = []
    
    print("üîÑ –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
    print(f"{'–°—É–º–∞':<8} {'–ñ–∞–¥—ñ–±–Ω–∏–π (–º—Å)':<15} {'–î–ü (–º—Å)':<12} {'–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è':<12}")
    print("-" * 55)
    
    for amount in amounts:
        # –¢–µ—Å—Ç—É—î–º–æ –∂–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        greedy_total = 0
        for _ in range(iterations):
            start = time.perf_counter()
            find_coins_greedy(amount)
            greedy_total += time.perf_counter() - start
        avg_greedy = greedy_total / iterations
        greedy_times.append(avg_greedy)
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
        dp_total = 0
        for _ in range(iterations):
            start = time.perf_counter()
            find_min_coins(amount)
            dp_total += time.perf_counter() - start
        avg_dp = dp_total / iterations
        dp_times.append(avg_dp)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
        speedup = avg_dp / avg_greedy if avg_greedy > 0 else float('inf')
        
        print(f"{amount:<8} {avg_greedy*1000:<15.3f} {avg_dp*1000:<12.3f} {speedup:<12.1f}x")
    
    return greedy_times, dp_times

def create_performance_plot(amounts: List[int], greedy_times: List[float], dp_times: List[float]):
    """
    –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.
    """
    try:
        plt.figure(figsize=(15, 10))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        greedy_ms = [t * 1000 for t in greedy_times]
        dp_ms = [t * 1000 for t in dp_times]
        
        # –ì—Ä–∞—Ñ—ñ–∫ 1: –õ—ñ–Ω—ñ–π–Ω–∞ —à–∫–∞–ª–∞
        plt.subplot(2, 2, 1)
        plt.plot(amounts, greedy_ms, 'b-o', label='–ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º', linewidth=2)
        plt.plot(amounts, dp_ms, 'r-s', label='–î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è', linewidth=2)
        plt.xlabel('–°—É–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É')
        plt.ylabel('–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)')
        plt.title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–ª—ñ–Ω—ñ–π–Ω–∞ —à–∫–∞–ª–∞)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 2: –õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞
        plt.subplot(2, 2, 2)
        plt.loglog(amounts, greedy_ms, 'b-o', label='–ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º')
        plt.loglog(amounts, dp_ms, 'r-s', label='–î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è')
        plt.xlabel('–°—É–º–∞ (–ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞)')
        plt.ylabel('–ß–∞—Å (–º—Å, –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞)')
        plt.title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —É –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω—ñ–π —à–∫–∞–ª—ñ')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 3: –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
        plt.subplot(2, 2, 3)
        speedup = [dp / greedy for dp, greedy in zip(dp_times, greedy_times)]
        plt.plot(amounts, speedup, 'g-^', linewidth=2, markersize=8)
        plt.xlabel('–°—É–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ–Ω—É')
        plt.ylabel('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è (—Ä–∞–∑—ñ–≤)')
        plt.title('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∂–∞–¥—ñ–±–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –î–ü')
        plt.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 4: –°—Ç–æ–≤–ø—á–∞—Å—Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∞
        plt.subplot(2, 2, 4)
        x = np.arange(len(amounts))
        width = 0.35
        
        plt.bar(x - width/2, greedy_ms, width, label='–ñ–∞–¥—ñ–±–Ω–∏–π', alpha=0.8, color='blue')
        plt.bar(x + width/2, dp_ms, width, label='–î–ü', alpha=0.8, color='red')
        plt.xlabel('–°—É–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
        plt.ylabel('–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)')
        plt.title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ —Ç–µ—Å—Ç–∞—Ö')
        plt.xticks(x, [str(a) for a in amounts])
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('performance_comparison.png', dpi=300, bbox_inches='tight')
        plt.show()
        print("üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ 'performance_comparison.png'")
        
    except ImportError:
        print("‚ö†Ô∏è  Matplotlib –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ì—Ä–∞—Ñ—ñ–∫ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∞: {e}")

def memory_usage_analysis():
    """
    –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏.
    """
    import sys
    
    print("\nüìä –ê–ù–ê–õ–Ü–ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ü–ê–ú'–Ø–¢–Ü")
    print("=" * 40)
    
    amounts = [100, 1000, 5000, 10000]
    
    print(f"{'–°—É–º–∞':<8} {'–ñ–∞–¥—ñ–±–Ω–∏–π (bytes)':<18} {'–î–ü (bytes)':<15} {'–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è'}")
    print("-" * 60)
    
    for amount in amounts:
        # –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        result_greedy = find_coins_greedy(amount)
        greedy_memory = sys.getsizeof(result_greedy)
        
        # –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (–ø—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞)
        # –î–ü –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—Å–∏–≤ —Ä–æ–∑–º—ñ—Ä—É amount + 1
        dp_memory_estimate = amount * 8  # 8 bytes per int
        
        ratio = dp_memory_estimate / greedy_memory if greedy_memory > 0 else 0
        
        print(f"{amount:<8} {greedy_memory:<18} {dp_memory_estimate:<15} {ratio:<12.1f}x")

def stress_testing():
    """
    –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö —Å—É–º–∞—Ö.
    """
    print("\nüî• –°–¢–†–ï–°-–¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 30)
    
    large_amounts = [50000, 100000, 200000, 500000]
    
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö —Å—É–º–∞—Ö...")
    print(f"{'–°—É–º–∞':<10} {'–ñ–∞–¥—ñ–±–Ω–∏–π (–º—Å)':<15} {'–°—Ç–∞—Ç—É—Å'}")
    print("-" * 40)
    
    for amount in large_amounts:
        try:
            start = time.perf_counter()
            result = find_coins_greedy(amount)
            duration = time.perf_counter() - start
            
            total_coins = get_total_coins(result)
            status = f"‚úÖ {total_coins} –º–æ–Ω–µ—Ç"
            
            print(f"{amount:<10} {duration*1000:<15.3f} {status}")
            
        except Exception as e:
            print(f"{amount:<10} {'ERROR':<15} ‚ùå {str(e)}")
    
    print("\n–ü—Ä–∏–º—ñ—Ç–∫–∞: –î–ü –Ω–µ —Ç–µ—Å—Ç—É—î—Ç—å—Å—è –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö —Å—É–º–∞—Ö —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ")

def algorithm_correctness_test():
    """
    –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.
    """
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–Ü")
    print("=" * 35)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—É–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_amounts = [random.randint(1, 1000) for _ in range(20)]
    test_amounts.extend([1, 2, 3, 50, 99, 100, 113, 999])  # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
    
    mismatches = 0
    total_tests = len(test_amounts)
    
    print("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—é—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
    
    for amount in test_amounts:
        greedy_result = find_coins_greedy(amount)
        dp_result = find_min_coins(amount)
        
        greedy_total = get_total_coins(greedy_result)
        dp_total = get_total_coins(dp_result)
        
        if greedy_total != dp_total:
            mismatches += 1
            print(f"‚ùå –°—É–º–∞ {amount}: –ñ–∞–¥—ñ–±–Ω–∏–π={greedy_total}, –î–ü={dp_total}")
    
    success_rate = (total_tests - mismatches) / total_tests * 100
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {total_tests}")
    print(f"   ‚Ä¢ –°–ø—ñ–≤–ø–∞–¥—ñ–Ω—å: {total_tests - mismatches}")
    print(f"   ‚Ä¢ –†–æ–∑–±—ñ–∂–Ω–æ—Å—Ç–µ–π: {mismatches}")
    print(f"   ‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: {success_rate:.1f}%")
    
    if mismatches == 0:
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ! –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
    else:
        print("‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞.")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
    """
    print("‚ö° –†–û–ó–®–ò–†–ï–ù–Ü –¢–ï–°–¢–ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    print("–ê–ª–≥–æ—Ä–∏—Ç–º–∏ —Ä–æ–∑–º—ñ–Ω—É –≥—Ä–æ—à–µ–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ
    algorithm_correctness_test()
    
    # –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    test_amounts = [10, 50, 100, 500, 1000, 2000, 5000, 10000]
    greedy_times, dp_times = measure_performance(test_amounts)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    create_performance_plot(test_amounts, greedy_times, dp_times)
    
    # –ê–Ω–∞–ª—ñ–∑ –ø–∞–º'—è—Ç—ñ
    memory_usage_analysis()
    
    # –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    stress_testing()
    
    print(f"\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    print("   ‚Ä¢ –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ç–∞–±—ñ–ª—å–Ω–æ —à–≤–∏–¥—à–∏–π")
    print("   ‚Ä¢ –î–ª—è –Ω–∞—à–æ–≥–æ –Ω–∞–±–æ—Ä—É –º–æ–Ω–µ—Ç –æ–±–∏–¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ")
    print("   ‚Ä¢ –î–ü –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ –ø–∞–º'—è—Ç—ñ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å—É–º")

if __name__ == "__main__":
    main()
